{"javascript":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n  var len = nums1.length + nums2.length;\n  if (len % 2 === 1) {\n    return findKthValueOfTwoArrays(nums1, 0, nums2, 0, (len + 1) / 2);\n  }\n  return (\n    (findKthValueOfTwoArrays(nums1, 0, nums2, 0, len / 2) +\n      findKthValueOfTwoArrays(nums1, 0, nums2, 0, len / 2 + 1)) /\n    2\n  );\n};\n\nvar findKthValueOfTwoArrays = function(nums1, pointer1, nums2, pointer2, k) {\n  if (nums1.length <= pointer1) {\n    return nums2[pointer2 + k - 1];\n  }\n  if (nums2.length <= pointer2) {\n    return nums1[pointer1 + k - 1];\n  }\n  if (k === 1) {\n    return Math.min(nums1[pointer1], nums2[pointer2]);\n  }\n  var midK = Math.floor(k / 2);\n  var mid1 =\n    pointer1 + midK - 1 < nums1.length ? nums1[pointer1 + midK - 1] : null;\n  var mid2 =\n    pointer2 + midK - 1 < nums2.length ? nums2[pointer2 + midK - 1] : null;\n  if (mid2 === null || (mid1 !== null && mid1 < mid2)) {\n    return findKthValueOfTwoArrays(\n      nums1,\n      pointer1 + midK,\n      nums2,\n      pointer2,\n      k - midK\n    );\n  } else {\n    return findKthValueOfTwoArrays(\n      nums1,\n      pointer1,\n      nums2,\n      pointer2 + midK,\n      k - midK\n    );\n  }\n};\n"}